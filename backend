const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));

// MongoDB connection
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log('Connected to MongoDB'))
.catch(err => console.error('MongoDB connection error:', err));

// Models
const userSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true },
  password: String,
  role: { type: String, default: 'Viewer' },
  lastLogin: { type: Date, default: Date.now },
  status: { type: String, default: 'Active' }
});

const transactionSchema = new mongoose.Schema({
  transactionId: { type: String, unique: true },
  time: { type: Date, default: Date.now },
  type: String,
  amount: Number,
  riskScore: Number,
  status: String,
  indicators: [String],
  userId: mongoose.Schema.Types.ObjectId
});

const ruleSchema = new mongoose.Schema({
  name: String,
  type: String,
  condition: String,
  action: String,
  status: { type: String, default: 'Active' },
  createdBy: mongoose.Schema.Types.ObjectId,
  createdAt: { type: Date, default: Date.now },
  triggers: { type: Number, default: 0 },
  accuracy: { type: Number, default: 0 }
});

const reportSchema = new mongoose.Schema({
  name: String,
  period: String,
  generatedAt: { type: Date, default: Date.now },
  status: { type: String, default: 'Complete' },
  data: mongoose.Schema.Types.Mixed
});

const User = mongoose.model('User', userSchema);
const Transaction = mongoose.model('Transaction', transactionSchema);
const Rule = mongoose.model('Rule', ruleSchema);
const Report = mongoose.model('Report', reportSchema);

// Authentication middleware
const authenticate = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ message: 'Authentication required' });
  }
  
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ message: 'Invalid token' });
  }
};

// Routes
// Auth routes
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    
    const isMatch = await bcrypt.compare(password, user.password);
    
    if (!isMatch) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }
    
    user.lastLogin = Date.now();
    await user.save();
    
    const token = jwt.sign(
      { id: user._id, name: user.name, email: user.email, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );
    
    res.json({ token, user: { id: user._id, name: user.name, email: user.email, role: user.role } });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

app.post('/api/auth/register', async (req, res) => {
  try {
    const { name, email, password, role } = req.body;
    let user = await User.findOne({ email });
    
    if (user) {
      return res.status(400).json({ message: 'User already exists' });
    }
    
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
    
    user = new User({
      name,
      email,
      password: hashedPassword,
      role: role || 'Viewer'
    });
    
    await user.save();
    
    const token = jwt.sign(
      { id: user._id, name: user.name, email: user.email, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );
    
    res.json({ token, user: { id: user._id, name: user.name, email: user.email, role: user.role } });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

// Dashboard routes
app.get('/api/dashboard/stats', authenticate, async (req, res) => {
  try {
    const total = await Transaction.countDocuments();
    const flagged = await Transaction.countDocuments({ status: 'Flagged' });
    const confirmed = await Transaction.countDocuments({ status: 'Blocked' });
    const prevented = Math.floor(confirmed * 0.875); // Simulated data
    
    // Calculate total amount saved from prevented transactions
    const preventedTransactions = await Transaction.find({ status: 'Blocked' }).limit(prevented);
    const savings = preventedTransactions.reduce((total, tx) => total + tx.amount, 0);
    
    res.json({
      total,
      flagged,
      confirmed,
      prevented,
      savings: `$${savings.toLocaleString()}`
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

app.get('/api/dashboard/alerts', authenticate, async (req, res) => {
  try {
    const alerts = await Transaction.find({ riskScore: { $gt: 80 } })
      .sort({ time: -1 })
      .limit(10)
      .select('transactionId time type amount riskScore status indicators');
      
    // Format the results
    const formattedAlerts = alerts.map(alert => ({
      id: alert.transactionId,
      time: formatTimeAgo(alert.time),
      type: alert.type,
      amount: `$${alert.amount.toFixed(2)}`,
      risk: alert.riskScore,
      status: alert.status,
      indicators: alert.indicators
    }));
    
    res.json(formattedAlerts);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

app.get('/api/dashboard/volume', authenticate, async (req, res) => {
  try {
    const timeframe = req.query.timeframe || '24h';
    let timeQuery = {};
    let groupFormat = '%H';
    
    if (timeframe === '24h') {
      timeQuery = { time: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) } };
      groupFormat = '%H';
    } else if (timeframe === '7d') {
      timeQuery = { time: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } };
      groupFormat = '%Y-%m-%d';
    } else if (timeframe === '30d') {
      timeQuery = { time: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) } };
      groupFormat = '%Y-%m-%d';
    }
    
    const volumeData = await Transaction.aggregate([
      { $match: timeQuery },
      { $group: {
        _id: { $dateToString: { format: groupFormat, date: '$time' } },
        total: { $sum: 1 },
        fraudulent: { $sum: { $cond: [{ $gt: ['$riskScore', 80] }, 1, 0] } }
      }},
      { $sort: { '_id': 1 } }
    ]);
    
    // Format the results
    const formattedVolume = volumeData.map(item => ({
      name: timeframe === '24h' ? `${item._id}:00` : item._id,
      total: item.total,
      fraudulent: item.fraudulent
    }));
    
    res.json(formattedVolume);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

app.get('/api/dashboard/fraud-categories', authenticate, async (req, res) => {
  try {
    const categories = await Transaction.aggregate([
      { $match: { status: 'Blocked' } },
      { $group: {
        _id: { $arrayElemAt: ['$indicators', 0] },
        value: { $sum: 1 }
      }},
      { $sort: { value: -1 } },
      { $limit: 5 }
    ]);
    
    // Format the results
    const formattedCategories = categories.map(cat => ({
      name: cat._id || 'Other',
      value: cat.value
    }));
    
    res.json(formattedCategories);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

// Rules routes
app.get('/api/rules', authenticate, async (req, res) => {
  try {
    const rules = await Rule.find().sort({ createdAt: -1 });
    res.json(rules);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

app.post('/api/rules', authenticate, async (req, res) => {
  try {
    const { name, type, condition, action } = req.body;
    
    const rule = new Rule({
      name,
      type,
      condition,
      action,
      createdBy: req.user.id
    });
    
    await rule.save();
    res.json(rule);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

app.put('/api/rules/:id', authenticate, async (req, res) => {
  try {
    const { name, type, condition, action, status } = req.body;
    
    const rule = await Rule.findByIdAndUpdate(
      req.params.id,
      { name, type, condition, action, status },
      { new: true }
    );
    
    if (!rule) {
      return res.status(404).json({ message: 'Rule not found' });
    }
    
    res.json(rule);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

// Reports routes
app.get('/api/reports', authenticate, async (req, res) => {
  try {
    const reports = await Report.find().sort({ generatedAt: -1 });
    res.json(reports);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

app.post('/api/reports/generate', authenticate, async (req, res) => {
  try {
    const { name, period } = req.body;
    
    // Logic to generate report data would go here
    // This is a simplified example
    const reportData = {
      transactionCount: await Transaction.countDocuments(),
      fraudCount: await Transaction.countDocuments({ status: 'Blocked' }),
      topRiskIndicators: await Transaction.aggregate([
        { $match: { riskScore: { $gt: 80 } } },
        { $unwind: '$indicators' },
        { $group: { _id: '$indicators', count: { $sum: 1 } } },
        { $sort: { count: -1 } },
        { $limit: 5 }
      ])
    };
    
    const report = new Report({
      name,
      period,
      data: reportData
    });
    
    await report.save();
    res.json(report);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

// Settings and user management routes
app.get('/api/users', authenticate, async (req, res) => {
  // Check if user has admin privileges
  if (req.user.role !== 'Admin') {
    return res.status(403).json({ message: 'Access denied' });
  }
  
  try {
    const users = await User.find().select('-password');
    res.json(users);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

app.put('/api/users/:id', authenticate, async (req, res) => {
  // Check if user has admin privileges
  if (req.user.role !== 'Admin') {
    return res.status(403).json({ message: 'Access denied' });
  }
  
  try {
    const { name, email, role, status } = req.body;
    
    const user = await User.findByIdAndUpdate(
      req.params.id,
      { name, email, role, status },
      { new: true }
    ).select('-password');
    
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    
    res.json(user);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

// Transactions API
app.get('/api/transactions', authenticate, async (req, res) => {
  try {
    const { status, riskLevel, page = 1, limit = 20 } = req.query;
    const skip = (page - 1) * limit;
    
    let query = {};
    
    if (status && status !== 'All') {
      query.status = status;
    }
    
    if (riskLevel) {
      if (riskLevel === 'high') {
        query.riskScore = { $gt: 75 };
      } else if (riskLevel === 'medium') {
        query.riskScore = { $gte: 40, $lte: 75 };
      } else if (riskLevel === 'low') {
        query.riskScore = { $lt: 40 };
      }
    }
    
    const transactions = await Transaction.find(query)
      .sort({ time: -1 })
      .skip(skip)
      .limit(parseInt(limit));
      
    const total = await Transaction.countDocuments(query);
    
    res.json({
      transactions,
      pagination: {
        total,
        page: parseInt(page),
        pages: Math.ceil(total / limit)
      }
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

app.post('/api/transactions', authenticate, async (req, res) => {
  try {
    const { transactionId, type, amount, riskScore, status, indicators } = req.body;
    
    const transaction = new Transaction({
      transactionId,
      type,
      amount,
      riskScore,
      status,
      indicators,
      userId: req.user.id
    });
    
    await transaction.save();
    
    // Check if this transaction triggers any rules
    await processRulesForTransaction(transaction);
    
    res.json(transaction);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

app.put('/api/transactions/:id', authenticate, async (req, res) => {
  try {
    const { status, indicators } = req.body;
    
    const transaction = await Transaction.findByIdAndUpdate(
      req.params.id,
      { status, indicators },
      { new: true }
    );
    
    if (!transaction) {
      return res.status(404).json({ message: 'Transaction not found' });
    }
    
    res.json(transaction);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
});

// Rule processing helper function
async function processRulesForTransaction(transaction) {
  try {
    const activeRules = await Rule.find({ status: 'Active' });
    
    for (const rule of activeRules) {
      let shouldTrigger = false;
      
      // Simple rule processing logic - in a real system this would be more robust
      if (rule.type === 'Amount' && rule.condition.includes('>')) {
        const threshold = parseFloat(rule.condition.split('>')[1].trim());
        shouldTrigger = transaction.amount > threshold;
      } else if (rule.type === 'Risk Score' && rule.condition.includes('>')) {
        const threshold = parseFloat(rule.condition.split('>')[1].trim());
        shouldTrigger = transaction.riskScore > threshold;
      } else if (rule.type === 'Indicator' && transaction.indicators) {
        const indicator = rule.condition.trim();
        shouldTrigger = transaction.indicators.includes(indicator);
      }
      
      if (shouldTrigger) {
        // Update the rule trigger count
        rule.triggers += 1;
        await rule.save();
        
        // Apply the rule action
        if (rule.action === 'Flag') {
          transaction.status = 'Flagged';
          await transaction.save();
        } else if (rule.action === 'Block') {
          transaction.status = 'Blocked';
          await transaction.save();
        }
      }
    }
  } catch (error) {
    console.error('Error processing rules:', error);
  }
}

// Helper function for formatting time
function formatTimeAgo(date) {
  const now = new Date();
  const diff = Math.floor((now - date) / 1000); // difference in seconds
  
  if (diff < 60) {
    return `${diff} seconds ago`;
  } else if (diff < 3600) {
    return `${Math.floor(diff / 60)} minutes ago`;
  } else if (diff < 86400) {
    return `${Math.floor(diff / 3600)} hours ago`;
  } else {
    return `${Math.floor(diff / 86400)} days ago`;
  }
}

// For testing purposes - create an admin user if none exists
async function createInitialAdminUser() {
  try {
    const adminExists = await User.findOne({ role: 'Admin' });
    
    if (!adminExists) {
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash('admin123', salt);
      
      const admin = new User({
        name: 'Admin User',
        email: 'admin@fraudguard.com',
        password: hashedPassword,
        role: 'Admin'
      });
      
      await admin.save();
      console.log('Initial admin user created');
    }
  } catch (error) {
    console.error('Error creating admin user:', error);
  }
}

// Create sample data for demonstration purposes
async function createSampleData() {
  try {
    const transactionCount = await Transaction.countDocuments();
    
    if (transactionCount === 0) {
      const transactionTypes = ['Transfer', 'Withdrawal', 'Deposit', 'Payment'];
      const indicators = ['Unusual IP', 'Velocity', 'Amount Anomaly', 'New Device', 'Geolocation Mismatch'];
      const statuses = ['Processed', 'Flagged', 'Blocked'];
      
      // Create 100 sample transactions
      const transactions = [];
      for (let i = 0; i < 100; i++) {
        const type = transactionTypes[Math.floor(Math.random() * transactionTypes.length)];
        const amount = Math.floor(Math.random() * 10000) + 50;
        const riskScore = Math.floor(Math.random() * 100);
        const status = riskScore > 80 ? 'Flagged' : (riskScore > 60 ? Math.random() > 0.5 ? 'Flagged' : 'Processed' : 'Processed');
        const transactionIndicators = [];
        
        // Add 1-3 random indicators for high risk transactions
        if (riskScore > 70) {
          const indicatorCount = Math.floor(Math.random() * 3) + 1;
          for (let j = 0; j < indicatorCount; j++) {
            const indicator = indicators[Math.floor(Math.random() * indicators.length)];
            if (!transactionIndicators.includes(indicator)) {
              transactionIndicators.push(indicator);
            }
          }
        }
        
        transactions.push({
          transactionId: `TX${Date.now().toString().substring(7)}${i}`,
          time: new Date(Date.now() - Math.floor(Math.random() * 30 * 24 * 60 * 60 * 1000)),
          type,
          amount,
          riskScore,
          status,
          indicators: transactionIndicators
        });
      }
      
      await Transaction.insertMany(transactions);
      console.log('Sample transactions created');
      
      // Create sample rules
      const rules = [
        {
          name: 'High Amount Flag',
          type: 'Amount',
          condition: '> 5000',
          action: 'Flag',
          status: 'Active',
          createdAt: new Date(),
          triggers: 0
        },
        {
          name: 'Very High Risk Block',
          type: 'Risk Score',
          condition: '> 85',
          action: 'Block',
          status: 'Active',
          createdAt: new Date(),
          triggers: 0
        },
        {
          name: 'Location Mismatch Alert',
          type: 'Indicator',
          condition: 'Geolocation Mismatch',
          action: 'Flag',
          status: 'Active',
          createdAt: new Date(),
          triggers: 0
        }
      ];
      
      await Rule.insertMany(rules);
      console.log('Sample rules created');
    }
  } catch (error) {
    console.error('Error creating sample data:', error);
  }
}

// Initialize data after connecting to MongoDB
mongoose.connection.once('open', async () => {
  await createInitialAdminUser();
  await createSampleData();
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
