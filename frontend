import React, { useState, useEffect } from 'react';
import { LineChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Line, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';
import { Shield, AlertTriangle, Activity, CreditCard, Users, Clock, TrendingUp, Settings, Filter, Search, Eye, Download, ChevronDown, Lock, Database } from 'lucide-react';

const FraudGuardPro = () => {
  // State management
  const [activeTab, setActiveTab] = useState('dashboard');
  const [timeframe, setTimeframe] = useState('24h');
  const [alertsExpanded, setAlertsExpanded] = useState(false);
  const [transactionType, setTransactionType] = useState('all');
  const [riskThreshold, setRiskThreshold] = useState(75);
  const [filterOpen, setFilterOpen] = useState(false);
  
  // Sample data
  const fraudStats = {
    total: 1243,
    flagged: 87,
    confirmed: 32,
    prevented: 28,
    savings: '$146,520'
  };
  
  const recentAlerts = [
    { id: 'TX-4392', time: '3 min ago', type: 'Card', amount: '$1,299.00', risk: 92, status: 'Flagged', indicators: ['Unusual location', 'High value', 'New device'] },
    { id: 'TX-4391', time: '12 min ago', type: 'ACH', amount: '$2,500.00', risk: 88, status: 'Reviewing', indicators: ['Velocity alert', 'Pattern match'] },
    { id: 'TX-4389', time: '28 min ago', type: 'Wallet', amount: '$899.50', risk: 95, status: 'Blocked', indicators: ['Known fraud pattern', 'Suspicious IP'] },
    { id: 'TX-4387', time: '45 min ago', type: 'Card', amount: '$199.00', risk: 81, status: 'Cleared', indicators: ['Customer verified', 'Initially suspicious'] },
    { id: 'TX-4385', time: '1 hour ago', type: 'Transfer', amount: '$5,000.00', risk: 89, status: 'Blocked', indicators: ['Amount anomaly', 'Account takeover signals'] }
  ];

  const riskScoreDistribution = [
    { name: '0-20', value: 2145 },
    { name: '21-40', value: 1432 },
    { name: '41-60', value: 856 },
    { name: '61-80', value: 423 },
    { name: '81-100', value: 201 }
  ];

  const transactionVolume = [
    { name: '12AM', total: 240, fraudulent: 12 },
    { name: '4AM', total: 138, fraudulent: 8 },
    { name: '8AM', total: 580, fraudulent: 23 },
    { name: '12PM', total: 892, fraudulent: 31 },
    { name: '4PM', total: 1102, fraudulent: 42 },
    { name: '8PM', total: 720, fraudulent: 29 }
  ];

  const fraudByCategory = [
    { name: 'Card Not Present', value: 42 },
    { name: 'Account Takeover', value: 28 },
    { name: 'Identity Theft', value: 15 },
    { name: 'Synthetic Identity', value: 10 },
    { name: 'Other', value: 5 }
  ];

  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];

  const renderActiveTabContent = () => {
    switch(activeTab) {
      case 'dashboard':
        return (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <div className="bg-white p-4 rounded-lg shadow">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-gray-500 text-sm">Transactions</p>
                    <h3 className="text-2xl font-bold">{fraudStats.total}</h3>
                  </div>
                  <Activity className="text-blue-500" size={24} />
                </div>
              </div>
              
              <div className="bg-white p-4 rounded-lg shadow">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-gray-500 text-sm">Flagged</p>
                    <h3 className="text-2xl font-bold">{fraudStats.flagged}</h3>
                  </div>
                  <AlertTriangle className="text-yellow-500" size={24} />
                </div>
              </div>
              
              <div className="bg-white p-4 rounded-lg shadow">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-gray-500 text-sm">Prevented Fraud</p>
                    <h3 className="text-2xl font-bold">{fraudStats.prevented}</h3>
                  </div>
                  <Shield className="text-green-500" size={24} />
                </div>
              </div>
              
              <div className="bg-white p-4 rounded-lg shadow">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-gray-500 text-sm">Money Saved</p>
                    <h3 className="text-2xl font-bold">{fraudStats.savings}</h3>
                  </div>
                  <CreditCard className="text-purple-500" size={24} />
                </div>
              </div>
            </div>
            
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
              <div className="bg-white p-4 rounded-lg shadow lg:col-span-2">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="font-semibold text-gray-700">Transaction Volume</h3>
                  <div className="flex space-x-2">
                    <select 
                      className="bg-gray-100 rounded text-sm px-2 py-1"
                      value={timeframe}
                      onChange={(e) => setTimeframe(e.target.value)}
                    >
                      <option value="24h">Last 24 Hours</option>
                      <option value="7d">Last 7 Days</option>
                      <option value="30d">Last 30 Days</option>
                    </select>
                  </div>
                </div>
                <div className="h-64">
                  <LineChart
                    width={500}
                    height={250}
                    data={transactionVolume}
                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Line type="monotone" dataKey="total" stroke="#8884d8" name="Total Transactions" />
                    <Line type="monotone" dataKey="fraudulent" stroke="#ff7300" name="Flagged as Fraud" />
                  </LineChart>
                </div>
              </div>
              
              <div className="bg-white p-4 rounded-lg shadow">
                <h3 className="font-semibold text-gray-700 mb-4">Fraud by Category</h3>
                <div className="h-64 flex items-center justify-center">
                  <PieChart width={300} height={200}>
                    <Pie
                      data={fraudByCategory}
                      cx={150}
                      cy={100}
                      innerRadius={40}
                      outerRadius={80}
                      fill="#8884d8"
                      paddingAngle={2}
                      dataKey="value"
                      label={({name, percent}) => `${name}: ${(percent * 100).toFixed(0)}%`}
                    >
                      {fraudByCategory.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </div>
              </div>
            </div>
            
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="flex justify-between items-center mb-4">
                <h3 className="font-semibold text-gray-700">Recent High-Risk Alerts</h3>
                <button 
                  className="text-blue-500 text-sm flex items-center"
                  onClick={() => setAlertsExpanded(!alertsExpanded)}
                >
                  {alertsExpanded ? 'Show Less' : 'View All'}
                  <ChevronDown size={16} className={`ml-1 transform ${alertsExpanded ? 'rotate-180' : ''}`} />
                </button>
              </div>
              
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Transaction ID</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Risk Score</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Risk Indicators</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {recentAlerts.slice(0, alertsExpanded ? undefined : 3).map((alert) => (
                      <tr key={alert.id} className="hover:bg-gray-50">
                        <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-blue-600">{alert.id}</td>
                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">{alert.time}</td>
                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">{alert.type}</td>
                        <td className="px-4 py-3 whitespace-nowrap text-sm font-medium">{alert.amount}</td>
                        <td className="px-4 py-3 whitespace-nowrap">
                          <div className="flex items-center">
                            <div className="w-16 bg-gray-200 rounded-full h-2.5">
                              <div 
                                className={`h-2.5 rounded-full ${
                                  alert.risk > 90 ? 'bg-red-600' : 
                                  alert.risk > 80 ? 'bg-orange-500' : 
                                  'bg-yellow-400'
                                }`} 
                                style={{ width: `${alert.risk}%` }}
                              ></div>
                            </div>
                            <span className="ml-2 text-sm text-gray-700">{alert.risk}</span>
                          </div>
                        </td>
                        <td className="px-4 py-3 whitespace-nowrap">
                          <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                            ${alert.status === 'Flagged' ? 'bg-yellow-100 text-yellow-800' : 
                              alert.status === 'Blocked' ? 'bg-red-100 text-red-800' :
                              alert.status === 'Cleared' ? 'bg-green-100 text-green-800' :
                              'bg-blue-100 text-blue-800'}`}
                          >
                            {alert.status}
                          </span>
                        </td>
                        <td className="px-4 py-3 text-sm text-gray-500">
                          {alert.indicators.slice(0, 2).join(', ')}
                          {alert.indicators.length > 2 && '...'}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        );
        
      case 'analytics':
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-bold text-gray-800">Fraud Analytics</h2>
              <div className="flex space-x-2">
                <button 
                  className="flex items-center bg-white border rounded-md px-3 py-1 text-sm text-gray-700 hover:bg-gray-50"
                  onClick={() => setFilterOpen(!filterOpen)}
                >
                  <Filter size={14} className="mr-1" />
                  Filters
                </button>
                <button className="flex items-center bg-white border rounded-md px-3 py-1 text-sm text-gray-700 hover:bg-gray-50">
                  <Download size={14} className="mr-1" />
                  Export
                </button>
              </div>
            </div>
            
            {filterOpen && (
              <div className="bg-white p-4 rounded-lg shadow grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Transaction Type</label>
                  <select 
                    className="w-full border rounded-md px-3 py-2"
                    value={transactionType}
                    onChange={(e) => setTransactionType(e.target.value)}
                  >
                    <option value="all">All Types</option>
                    <option value="card">Card Transactions</option>
                    <option value="ach">ACH Transfers</option>
                    <option value="wallet">Digital Wallet</option>
                    <option value="wire">Wire Transfers</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Time Period</label>
                  <select 
                    className="w-full border rounded-md px-3 py-2"
                    >
                      <option value="24h">Last 24 Hours</option>
                      <option value="7d">Last 7 Days</option>
                      <option value="30d">Last 30 Days</option>
                      <option value="90d">Last 90 Days</option>
                      <option value="custom">Custom Range</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Risk Threshold</label>
                    <div className="flex items-center">
                      <input 
                        type="range" 
                        min="1" 
                        max="100" 
                        value={riskThreshold} 
                        onChange={(e) => setRiskThreshold(parseInt(e.target.value))}
                        className="w-full"
                      />
                      <span className="ml-2 text-sm text-gray-700">{riskThreshold}</span>
                    </div>
                  </div>
                </div>
              )}
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                <div className="bg-white p-4 rounded-lg shadow">
                  <h3 className="font-semibold text-gray-700 mb-4">Risk Score Distribution</h3>
                  <div className="h-64">
                    <BarChart
                      width={400}
                      height={250}
                      data={riskScoreDistribution}
                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="name" />
                      <YAxis />
                      <Tooltip />
                      <Legend />
                      <Bar dataKey="value" fill="#8884d8" name="Transactions" />
                    </BarChart>
                  </div>
                </div>
                
                <div className="bg-white p-4 rounded-lg shadow">
                  <h3 className="font-semibold text-gray-700 mb-4">Fraud Trends</h3>
                  <div className="h-64">
                    <LineChart
                      width={400}
                      height={250}
                      data={[
                        { date: 'Mon', attempted: 45, prevented: 32 },
                        { date: 'Tue', attempted: 52, prevented: 41 },
                        { date: 'Wed', attempted: 48, prevented: 35 },
                        { date: 'Thu', attempted: 61, prevented: 49 },
                        { date: 'Fri', attempted: 55, prevented: 42 },
                        { date: 'Sat', attempted: 47, prevented: 38 },
                        { date: 'Sun', attempted: 42, prevented: 31 }
                      ]}
                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="date" />
                      <YAxis />
                      <Tooltip />
                      <Legend />
                      <Line type="monotone" dataKey="attempted" stroke="#ff7300" name="Attempted Fraud" />
                      <Line type="monotone" dataKey="prevented" stroke="#82ca9d" name="Prevented Fraud" />
                    </LineChart>
                  </div>
                </div>
              </div>
              
              <div className="bg-white p-4 rounded-lg shadow">
                <h3 className="font-semibold text-gray-700 mb-4">Geographical Fraud Hotspots</h3>
                <div className="p-6 h-64 flex items-center justify-center bg-gray-100 rounded">
                  <p className="text-gray-500">Map visualization would go here</p>
                </div>
              </div>
            </div>
          );
          
        case 'rules':
          return (
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-bold text-gray-800">Fraud Rules Engine</h2>
                <div className="flex space-x-2">
                  <button className="flex items-center bg-blue-500 text-white rounded-md px-3 py-1 text-sm hover:bg-blue-600">
                    <Lock size={14} className="mr-1" />
                    New Rule
                  </button>
                </div>
              </div>
              
              <div className="bg-white p-4 rounded-lg shadow">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="font-semibold text-gray-700">Active Rule Sets</h3>
                  <div className="flex items-center">
                    <input 
                      type="text" 
                      placeholder="Search rules..." 
                      className="border rounded-md px-3 py-1 text-sm mr-2"
                    />
                    <button className="bg-gray-100 rounded-md p-1">
                      <Search size={16} />
                    </button>
                  </div>
                </div>
                
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rule Name</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Condition</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {[
                        { id: 1, name: 'High-Value Transaction', type: 'Threshold', condition: 'Amount > $1,000', action: 'Flag for Review', status: 'Active' },
                        { id: 2, name: 'Unusual Location', type: 'Geolocation', condition: 'Location != User History', action: 'Two-Factor Auth', status: 'Active' },
                        { id: 3, name: 'Rapid Transactions', type: 'Velocity', condition: '3+ Transactions in 5 min', action: 'Temporary Block', status: 'Active' },
                        { id: 4, name: 'Known Fraud Pattern', type: 'Pattern', condition: 'Matches Pattern #F-42', action: 'Block & Report', status: 'Active' },
                        { id: 5, name: 'After Hours Access', type: 'Time', condition: 'Between 11PM-5AM', action: 'Enhanced Verification', status: 'Inactive' }
                      ].map((rule) => (
                        <tr key={rule.id} className="hover:bg-gray-50">
                          <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-blue-600">{rule.name}</td>
                          <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">{rule.type}</td>
                          <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">{rule.condition}</td>
                          <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">{rule.action}</td>
                          <td className="px-4 py-3 whitespace-nowrap">
                            <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                              ${rule.status === 'Active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}
                            >
                              {rule.status}
                            </span>
                          </td>
                          <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                            <div className="flex space-x-2">
                              <button className="text-blue-500 hover:text-blue-700">
                                <Eye size={16} />
                              </button>
                              <button className="text-gray-500 hover:text-gray-700">
                                <Settings size={16} />
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
              
              <div className="bg-white p-4 rounded-lg shadow">
                <h3 className="font-semibold text-gray-700 mb-4">Rule Performance</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {[
                    { name: 'High-Value Transaction', triggers: 145, accuracy: 82 },
                    { name: 'Unusual Location', triggers: 284, accuracy: 76 },
                    { name: 'Rapid Transactions', triggers: 108, accuracy: 93 }
                  ].map((rule, idx) => (
                    <div key={idx} className="bg-gray-50 p-3 rounded-lg">
                      <h4 className="font-medium text-gray-700">{rule.name}</h4>
                      <div className="flex justify-between mt-2">
                        <div>
                          <p className="text-xs text-gray-500">Triggers</p>
                          <p className="text-lg font-semibold">{rule.triggers}</p>
                        </div>
                        <div>
                          <p className="text-xs text-gray-500">Accuracy</p>
                          <p className="text-lg font-semibold">{rule.accuracy}%</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          );
          
        case 'reports':
          return (
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-bold text-gray-800">Fraud Reports</h2>
                <div className="flex space-x-2">
                  <button className="flex items-center bg-white border rounded-md px-3 py-1 text-sm text-gray-700 hover:bg-gray-50">
                    <Download size={14} className="mr-1" />
                    Export
                  </button>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="bg-white p-4 rounded-lg shadow">
                  <h3 className="font-semibold text-gray-700 mb-4">Fraud Summary Report</h3>
                  <div className="space-y-3">
                    <div className="flex justify-between items-center px-3 py-2 bg-gray-50 rounded">
                      <span className="text-sm text-gray-700">Total Transactions</span>
                      <span className="font-semibold">{fraudStats.total}</span>
                    </div>
                    <div className="flex justify-between items-center px-3 py-2 bg-gray-50 rounded">
                      <span className="text-sm text-gray-700">Flagged for Review</span>
                      <span className="font-semibold">{fraudStats.flagged}</span>
                    </div>
                    <div className="flex justify-between items-center px-3 py-2 bg-gray-50 rounded">
                      <span className="text-sm text-gray-700">Confirmed Fraud</span>
                      <span className="font-semibold">{fraudStats.confirmed}</span>
                    </div>
                    <div className="flex justify-between items-center px-3 py-2 bg-gray-50 rounded">
                      <span className="text-sm text-gray-700">Fraud Prevention Rate</span>
                      <span className="font-semibold">{Math.round((fraudStats.prevented / fraudStats.confirmed) * 100)}%</span>
                    </div>
                    <div className="flex justify-between items-center px-3 py-2 bg-gray-50 rounded">
                      <span className="text-sm text-gray-700">Total Money Saved</span>
                      <span className="font-semibold">{fraudStats.savings}</span>
                    </div>
                  </div>
                </div>
                
                <div className="bg-white p-4 rounded-lg shadow">
                  <h3 className="font-semibold text-gray-700 mb-4">Top Fraud Indicators</h3>
                  <div className="space-y-3">
                    {[
                      { name: 'Unusual Location', count: 48, change: '+12%' },
                      { name: 'Device Mismatch', count: 36, change: '+8%' },
                      { name: 'Velocity Alert', count: 29, change: '-3%' },
                      { name: 'Amount Anomaly', count: 25, change: '+5%' },
                      { name: 'IP Reputation', count: 20, change: '+15%' }
                    ].map((indicator, idx) => (
                      <div key={idx} className="flex justify-between items-center px-3 py-2 bg-gray-50 rounded">
                        <span className="text-sm text-gray-700">{indicator.name}</span>
                        <div className="flex items-center space-x-4">
                          <span className="font-semibold">{indicator.count}</span>
                          <span className={`text-xs ${indicator.change.startsWith('+') ? 'text-green-600' : 'text-red-600'}`}>
                            {indicator.change}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
              
              <div className="bg-white p-4 rounded-lg shadow">
                <h3 className="font-semibold text-gray-700 mb-4">Recent Reports</h3>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Report Name</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Generated</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Period</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {[
                      { id: 1, name: 'Weekly Fraud Summary', date: 'Mar 14, 2025', period: 'Last Week', status: 'Complete' },
                      { id: 2, name: 'Monthly Risk Analysis', date: 'Mar 01, 2025', period: 'Feb 2025', status: 'Complete' },
                      { id: 3, name: 'High-Risk Transactions', date: 'Mar 13, 2025', period: 'Last 24h', status: 'Complete' },
                      { id: 4, name: 'Fraud Pattern Report', date: 'Mar 10, 2025', period: 'Last Month', status: 'Complete' },
                    ].map((report) => (
                      <tr key={report.id} className="hover:bg-gray-50">
                        <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-blue-600">{report.name}</td>
                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">{report.date}</td>
                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">{report.period}</td>
                        <td className="px-4 py-3 whitespace-nowrap">
                          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                            {report.status}
                          </span>
                        </td>
                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                          <div className="flex space-x-2">
                            <button className="text-blue-500 hover:text-blue-700">View</button>
                            <button className="text-blue-500 hover:text-blue-700">Download</button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        );

      case 'settings':
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-bold text-gray-800">System Settings</h2>
              <button className="bg-blue-500 text-white rounded-md px-4 py-2 text-sm hover:bg-blue-600">
                Save Changes
              </button>
            </div>
            
            <div className="bg-white p-4 rounded-lg shadow">
              <h3 className="font-semibold text-gray-700 mb-4">Notification Settings</h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between px-3 py-2 bg-gray-50 rounded">
                  <div>
                    <p className="text-sm font-medium text-gray-700">High Risk Alerts</p>
                    <p className="text-xs text-gray-500">Receive alerts for high risk transactions</p>
                  </div>
                  <label className="switch">
                    <input type="checkbox" defaultChecked />
                    <span className="slider round"></span>
                  </label>
                </div>
                <div className="flex items-center justify-between px-3 py-2 bg-gray-50 rounded">
                  <div>
                    <p className="text-sm font-medium text-gray-700">Daily Report</p>
                    <p className="text-xs text-gray-500">Receive daily fraud summary report</p>
                  </div>
                  <label className="switch">
                    <input type="checkbox" defaultChecked />
                    <span className="slider round"></span>
                  </label>
                </div>
                <div className="flex items-center justify-between px-3 py-2 bg-gray-50 rounded">
                  <div>
                    <p className="text-sm font-medium text-gray-700">Rule Modification Alerts</p>
                    <p className="text-xs text-gray-500">Alert when fraud rules are modified</p>
                  </div>
                  <label className="switch">
                    <input type="checkbox" defaultChecked />
                    <span className="slider round"></span>
                  </label>
                </div>
              </div>
            </div>
            
            <div className="bg-white p-4 rounded-lg shadow">
              <h3 className="font-semibold text-gray-700 mb-4">System Configuration</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Default Risk Threshold</label>
                  <div className="flex items-center">
                    <input 
                      type="range" 
                      min="1" 
                      max="100" 
                      defaultValue="75" 
                      className="w-full"
                    />
                    <span className="ml-2 text-sm text-gray-700">75</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Automatic Blocking</label>
                  <select className="w-full border rounded-md px-3 py-2">
                    <option>For High Risk Only (90+)</option>
                    <option>For Medium Risk and Above (70+)</option>
                    <option>Manual Review Only</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Data Retention Period</label>
                  <select className="w-full border rounded-md px-3 py-2">
                    <option>30 Days</option>
                    <option>90 Days</option>
                    <option>180 Days</option>
                    <option>1 Year</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">API Integration</label>
                  <select className="w-full border rounded-md px-3 py-2">
                    <option>Enabled</option>
                    <option>Disabled</option>
                  </select>
                </div>
              </div>
            </div>
            
            <div className="bg-white p-4 rounded-lg shadow">
              <h3 className="font-semibold text-gray-700 mb-4">User Management</h3>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Login</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {[
                      { id: 1, name: 'John Smith', email: 'john@example.com', role: 'Admin', lastLogin: '2 hours ago', status: 'Active' },
                      { id: 2, name: 'Emma Davis', email: 'emma@example.com', role: 'Analyst', lastLogin: '1 day ago', status: 'Active' },
                      { id: 3, name: 'Michael Wilson', email: 'michael@example.com', role: 'Viewer', lastLogin: '3 days ago', status: 'Inactive' }
                    ].map((user) => (
                      <tr key={user.id} className="hover:bg-gray-50">
                        <td className="px-4 py-3 whitespace-nowrap">
                          <div className="flex items-center">
                            <div className="flex-shrink-0 h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center">
                              <span className="text-xs font-medium">{user.name.split(' ').map(n => n[0]).join('')}</span>
                            </div>
                            <div className="ml-3">
                              <p className="text-sm font-medium text-gray-900">{user.name}</p>
                              <p className="text-sm text-gray-500">{user.email}</p>
                            </div>
                          </div>
                        </td>
                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">{user.role}</td>
                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">{user.lastLogin}</td>
                        <td className="px-4 py-3 whitespace-nowrap">
                          <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                            ${user.status === 'Active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}
                          >
                            {user.status}
                          </span>
                        </td>
                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                          <div className="flex space-x-2">
                            <button className="text-blue-500 hover:text-blue-700">Edit</button>
                            <button className="text-red-500 hover:text-red-700">Disable</button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        );
      
      default:
        return <div>Select a tab to view content</div>;
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar */}
      <div className="w-14 md:w-64 bg-gray-800 text-white flex flex-col">
        <div className="p-4 flex items-center justify-center md:justify-start">
          <Shield className="h-6 w-6 text-blue-400" />
          <span className="ml-2 text-lg font-bold hidden md:block">FraudGuard Pro</span>
        </div>
        <nav className="flex-1 overflow-y-auto">
          <ul className="space-y-1 py-2">
            <li>
              <button
                className={`w-full flex items-center py-3 px-2 md:px-4 ${activeTab === 'dashboard' ? 'bg-gray-700' : 'hover:bg-gray-700'}`}
                onClick={() => setActiveTab('dashboard')}
              >
                <Activity className="h-5 w-5 text-gray-300" />
                <span className="ml-3 hidden md:block">Dashboard</span>
              </button>
            </li>
            <li>
              <button
                className={`w-full flex items-center py-3 px-2 md:px-4 ${activeTab === 'analytics' ? 'bg-gray-700' : 'hover:bg-gray-700'}`}
                onClick={() => setActiveTab('analytics')}
              >
                <TrendingUp className="h-5 w-5 text-gray-300" />
                <span className="ml-3 hidden md:block">Analytics</span>
              </button>
            </li>
            <li>
              <button
                className={`w-full flex items-center py-3 px-2 md:px-4 ${activeTab === 'rules' ? 'bg-gray-700' : 'hover:bg-gray-700'}`}
                onClick={() => setActiveTab('rules')}
              >
                <Lock className="h-5 w-5 text-gray-300" />
                <span className="ml-3 hidden md:block">Rules Engine</span>
              </button>
            </li>
            <li>
              <button
                className={`w-full flex items-center py-3 px-2 md:px-4 ${activeTab === 'reports' ? 'bg-gray-700' : 'hover:bg-gray-700'}`}
                onClick={() => setActiveTab('reports')}
              >
                <Database className="h-5 w-5 text-gray-300" />
                <span className="ml-3 hidden md:block">Reports</span>
              </button>
            </li>
            <li>
              <button
                className={`w-full flex items-center py-3 px-2 md:px-4 ${activeTab === 'settings' ? 'bg-gray-700' : 'hover:bg-gray-700'}`}
                onClick={() => setActiveTab('settings')}
              >
                <Settings className="h-5 w-5 text-gray-300" />
                <span className="ml-3 hidden md:block">Settings</span>
              </button>
            </li>
          </ul>
        </nav>
        <div className="p-4 hidden md:block">
          <div className="flex items-center">
            <div className="h-8 w-8 rounded-full bg-gray-600 flex items-center justify-center">
              <span className="text-xs font-medium">JS</span>
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium">John Smith</p>
              <p className="text-xs text-gray-400">Administrator</p>
            </div>
          </div>
        </div>
      </div>
      
      {/* Main content */}
      <div className="flex-1 overflow-y-auto">
        {/* Header */}
        <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex items-center justify-between">
            <h1 className="text-2xl font-bold text-gray-900">{activeTab.charAt(0).toUpperCase() + activeTab.slice(1)}</h1>
            <div className="flex items-center space-x-4">
              <div className="relative">
                <input
                  type="text"
                  placeholder="Search..."
                  className="bg-gray-100 rounded-md py-2 pl-10 pr-4 text-sm w-64"
                />
                <Search className="absolute left-3 top-2.5 h-4 w-4 text-gray-500" />
              </div>
              <button className="bg-white p-2 rounded-full">
                <Users className="h-5 w-5 text-gray-500" />
              </button>
              <button className="bg-white p-2 rounded-full">
                <Clock className="h-5 w-5 text-gray-500" />
              </button>
              <button className="bg-white p-2 rounded-full">
                <AlertTriangle className="h-5 w-5 text-gray-500" />
              </button>
            </div>
          </div>
        </header>
        
        {/* Main content */}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          {renderActiveTabContent()}
        </main>
      </div>
    </div>
  );
};

export default FraudGuardPro;
